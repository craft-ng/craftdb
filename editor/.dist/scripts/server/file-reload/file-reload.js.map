{"version":3,"sources":["server/file-reload/file-reload.ts"],"names":[],"mappings":";AAAA,2BAAkC,UAAU,CAAC,CAAA;AAC7C,MAAO,EAAE,WAAW,IAAI,CAAC,CAAC;AAI1B,oBAA2B,IAAY,EAAE,QAA8B;IACnE,MAAM,OAAO,GAAiB,gBAAK,CAAC,IAAI,CAAC,CAAC;IAE1C,OAAO,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,IAAE,WAAW,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;IACrD,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,IAAI,IAAE,WAAW,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;IACxD,OAAO,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,IAAE,OAAO,CAAC,GAAG,CAAC,kBAAkB,KAAK,EAAE,CAAC,CAAC,CAAC;AACvE,CAAC;AANe,kBAAU,aAMzB,CAAA;AAED,qBAAqB,IAAY,EAAE,QAA8B;IAC7D,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,EAAE,CAAC,GAAG,EAAE,OAAO;QACpC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACN,MAAM,GAAG,CAAC;QACd,CAAC;QACD,IAAI;YAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAC3B,CAAC,CAAC,CAAC;AACP,CAAC","file":"server/file-reload/file-reload.js","sourcesContent":["import {watch, WatchOptions} from \"chokidar\";\nimport fs = require('fs');\n\ntype ContentReadyCallback = (content: string) => void;\n\nexport function fileReload(path: string, callback: ContentReadyCallback) {\n    const watcher: fs.FSWatcher = watch(path);\n\n    watcher.on('add', file=>readContent(file, callback));\n    watcher.on('change', file=>readContent(file, callback));\n    watcher.on('error', error=>console.log(`Watcher error: ${error}`));\n}\n\nfunction readContent(path: string, callback: ContentReadyCallback) {\n    fs.readFile(path, 'utf-8', (err, content) => {\n        if (err) {\n            throw err;\n        }\n        else callback(content);\n    });\n}"],"sourceRoot":"/src"}